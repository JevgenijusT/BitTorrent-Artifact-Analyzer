using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;
using System.Text.RegularExpressions;

namespace BitTorrent_Artifact_Analyzer
{
    class Program
    {
        static void Main(string[] args)
        {
            // Default drive letter where Users directory will be scanned for BitTorrent activity artifacts
            string deviceToAnalize = "W:";

            // Default file name of the XML report which will be generated by the BitTorrent-Artifact-Analyzer
            string analyzerReportFileName = "BtaaReport.xml";

            // Default XML report file will be saved in the current user Documents directory
            string pathToSaveReport = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);

            // Default demonstrationMode=true;
            bool demonstrationMode = true;

            //  Command line arguments
            //  <Device to analyze> <Path to save XML report> <XML report file name> <Demonstration Mode>
            //  Only one argument is mandatory <Device letter to analyze>
            ConsoleKeyInfo pressedKey;
            string temp;
            int tempInt;
            if (args.Length == 0)
            {
                Console.WriteLine("\nUsage:" +
                    " \nBitTorrent-Artifact-Analyzer <Device to analyze> <Path to save XML report> <XML report file name> <Demonstration Mode>" +
                    "  \n\nUsage example:\nBitTorrent-Artifact-Analyzer W: C:\\Temp Report.xml 0");
                Console.WriteLine("\n\nCommand line arguments not found!");
                Console.WriteLine("Analyzer will use default arguments:\n" +
                    "Device to analyze {0}\n" +
                    "Path to save XML report {1}\n" +
                    "XML report file name {2}\n" +
                    "Demonstration Mode {3}\n", deviceToAnalize, pathToSaveReport, analyzerReportFileName, demonstrationMode);
                Console.WriteLine("To exit press key <E> to continue press any other key");
                pressedKey = Console.ReadKey(true);
                if (pressedKey.KeyChar == 'E' || pressedKey.KeyChar == 'e') return;
            }
            else
            {
                for (int i = 0; i < args.Length; i++)
                {
                    temp = args[i];
                    Match mt;
                    switch (i)
                    {
                        case 0:
                            mt = Regex.Match(temp, "^([a-zA-Z]):");
                            if (mt.Success) deviceToAnalize = temp;
                            else
                                Console.WriteLine("\n<Device to analyze> argument error {0} Analayzer will use default value {1}\n", temp, deviceToAnalize);
                                break;
                        case 1:
                            if (Directory.Exists(temp)) pathToSaveReport = temp;
                            else
                                Console.WriteLine("\n<Path to save XML report> argument error {0} Analayzer will use default value {1}\n", temp, pathToSaveReport);
                            break;
                        case 2:
                            var extension = Path.GetExtension(temp).ToUpper();
                            if (extension == ".XML") analyzerReportFileName = temp;
                            else
                                Console.WriteLine("\n<XML report file name> argument error {0} Analayzer will use default value {1}\n", temp, analyzerReportFileName);
                            break;
                        case 3:
                            if (int.TryParse(temp, out tempInt))
                            {
                                if (tempInt != 0) demonstrationMode = false;
                                else demonstrationMode = true;
                            }
                            else
                                Console.WriteLine("\n<Demonstration Mode> argument error {0} Analayzer will use default value {1}\n", temp, demonstrationMode);
                            break;
                    }
                }

                Console.WriteLine("Command line arguments are as follow:");
                Console.WriteLine("\nDevice to analyze {0}\n" +
                    "Path to save XML report {1}\n" +
                    "XML report file name {2}\n" +
                    "Demonstration Mode {3}\n", deviceToAnalize, pathToSaveReport, analyzerReportFileName, demonstrationMode);
                Console.WriteLine("To exit press key <E> to continue press any other key");
                pressedKey = Console.ReadKey(true);
                if (pressedKey.KeyChar == 'E' || pressedKey.KeyChar == 'e') return;
            }
            temp = Path.GetPathRoot(deviceToAnalize);
            if (!Directory.Exists(temp))
            { 
                Console.WriteLine("\nDevice to analyze {0} not found or inaccessible\n", deviceToAnalize);
                return;
            }
            // To use BitTorrent-Artifact-Analyzer create class object
            BitTorrent_Artifact_Analyzer btaa = new BitTorrent_Artifact_Analyzer(deviceToAnalize, pathToSaveReport, analyzerReportFileName);

            // To generate report run CreateReport() method
            btaa.CreateReport(demonstrationMode);
            string openReport = Path.Combine(pathToSaveReport, analyzerReportFileName);
            //Process.Start(openReport);

        }
    }
}
